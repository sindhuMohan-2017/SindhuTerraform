HCL (HashiCorp COnfiguration Language) Basics
===============================================
HCL file consists of  blocks and arguements

A block is defined within curly braces, and it contains a set of arguments in key value pair format representing the configuration data.

But what is a block and what arguments does it contain??
In its simplest form, a block in Terraform contains information about the infrastructure platform and a set of resources within that platform that 
we want to create.

For example, let us consider a simple task. We want to create a file in the local system where Terraform is installed.To do this first, let us create 
a directory called terraform-local-file under /root directory
  $ mkdir /root/terraform-local-file 
  $ cd /root/terraform-local-file

Now create a configurtaion file local.tf as shown below :
resource "local_file" "pet" {
  filename = "/root/pets.txt"
  content = "We love pets!"
}


The first element in this file is a block of this can be identified by the curly braces.

The type of block we see here is called the resource block, and this can be identified by the keyword called resource in the beginning of the block.

Following the keyword called resource, we have the declaration of the "resource type"  that we want to create.This is a fixed value and depends on 
the provider where we want to create the resource.In this case, we have the resource type called "local_file"

A resource Type provides two bits of information. First is the "provider", which is represented by the word before the underscore(_) in  the resource type
and here we are making use of the local provider.
And the word, following the underscore, which is file in this case, represents the type of resource.

    Resource type = local_file  ; local = provider and file = type of resource

The next and final declaration in this resource block is the "resource name".This is the logical name used to identify the resource, and it can be 
named anything.But in this case, we have called it "pet"  as the file we are creating contains information about pets.
  
  Resource Name = pet ; inside curly braces = arguements

And within this block and inside the curly braces, we defined the arguments for results which are written in key value pair format.These arguments are 
specific to the type of resource we are creating, which in the case of the local_file.

The first argument is the filename, to this We assigned the absolute path to the file we want to create. In this example, it is set to "/root/pets.txt"

Now we can also add some content to this file by making use of the content argument, to this we have added "We love pets!"

The words filename and content are specific to the local file resource we want to create and they cannot be changed.
In other words, the resource type of local file expects that we provide the argument or file name and content.

Each resource type has specific arguments that they expect 

We now have a complete HCL configuration file that we can use to create a file by the name of pets.txt. This file will be created in this 
/root directory, and it will contain a single line of data. The resource block that we see here is just one example of the configuration blocks 
used in HCL. But it is also a mandatory block needed to deploy a resource using TerraForm.


asw-ec2.tf example
-------------------
resource "aws_instance" "webserver" {
    ami = "ami-0c2f25c1f66a1ff4d"
    instance_type = "t2.micro"
}

Here is an example of a resource file created for provisioning  an AWS EC2 instance ,the resource type is "aws_instance" ,And the arguments that we have used here is the ami Id and the instance type.


aws-s3.tf example
------------------
resource "aws_s3_bucket" "data" { 
bucket = "webserver-bucket-org-2207" 
acl = "private"
}
Here is another example of a resource file used to create an AWS S3 bucket, The resource type in this case is "aws_s3_bucket" and the resource name that we have chosen as data and the arguments that we are provided as the bucket name and the ACL.


A simple terraformed workflow consists of four steps.
  -> First, write the configuration file.
  -> Next, Run the TerraForm init command.
  -> And after that review the execution plan, using the TerraForm plan command.
  -> Finally, once we are ready apply the changes using the the Terraform apply command.

example local.tf
----------------
resource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
}

With the configuration file ready, we can now create the file resource using the terraforme commands as follows.
  $ terraform init
This command will check the configuration file and initialize the working directory containing .tf file

One of the first things that this command does is to understand that we are making use of the local provider based on the resource type declared and the resource block.

It will then download the plugin to be able to work on the resources declared and .tf file

From the output of this command, we can see that terraform, init has installed a plugin called Local.

Next, we are ready to create the resource.

But before we do that, if you want to see the execution plan that will be carried out by terraform,we can use the command terraform plan.
  $ terraform plan
This command will show the actions that will be carried out by TerraForm to create the resource.

Output :: 
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage.
------------------------------------------------------------------------
An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols:
+ create
Terraform will perform the following actions:
  # local_file.pet will be created
  + resource "local_file" "pet" {
+ content = "We love pets!" + directory_permission = "0777"
} Plan:
+ file_permission
+ filename
+ id
= "0777"
= "/root/pets.txt"
= (known after apply)
1 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------
Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if "terraform apply" is subsequently run.


Therefore, knows that it has to create resources and this is displayed in the output similar to diff command in git

The output has a plus symbol next to the local file tab resource called Pet.This includes all the arguments that be specified in the .tf file for 
creating the resource. But you'll also notice that some default or optional arguments, which we did not specifically declare in the configuration file, this also displayed on the screen.

The plus symbol implies that the resource will be created.
Now, remember, this step will not create the infrastructure resource yet. This information is provided for the user to review and ensure that all the actions to be performed in this execution plan as desired.

After the review, we can create the resource. And to do this, we will make use of the terraform apply command.
  $ terrform apply
  
This command will displayed the execution plan once again, and it will then ask the user to confirm by typing, yes, to proceed. Once we confirm, it will proceed with the creation of the resource, which in this case is a file.

We can validate that the file was indeed created by running the cat command to view the file.

output ::

An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols:
+ create
Terraform will perform the following actions:
  # local_file.pet will be created
  + resource "local_file" "pet" {
} Plan:
+ file_permission
+ filename
+ id
1 to add, 0 to change,
= "0777"
= "/root/pets.txt"
= (known after apply)
0 to destroy.
+ content = "We love pets!" + directory_permission = "0777"
Do you want to perform these actions?
Terraform will perform the actions described above. Only 'yes' will be accepted to approve.
Enter a value: yes
local_file.new_file: Creating...
local_file.new_file: Creation complete after 0s [id=521c5c732c78cb42cc9513ecc7c0638c4a115b55]
Apply complete! Resources: 1 added, 0 changed, 0 destroyed.


$ cat /root/pets.txt  --> o/p :: We love pets!

We can also run the terraform show command within the configuration directory  to see the details of the resource that we just created.
$ terraform show
# local_file.pet:
resource "local_file" â€œpet" {
content = "We love pets!" directory_permission = "0777" file_permission ="0777" file_name ="/root/pets.txt"
id = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c"
}

This command, inspect state file and displays the resource details.



Earlier, we mentioned that terraforme supports over 100 providers, including the local provider we have used in this example. Other common examples are aws to deploy resources in Amazon, AWS Cloud, Azure, GCB, Ali Cloud,etc..

Each of these providers have a unique list of resources that can be created on that specific platform.And each resource can have a number of required are optional arguments that are needed to create that resource.And we can create as many resources of ease type as needed.



